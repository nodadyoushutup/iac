pipeline {
  agent any

  options {
    ansiColor('xterm')
  }

  parameters {
    string(name: 'TFVARS_FILE', defaultValue: '/home/jenkins/.tfvars', description: 'Optional path to the tfvars file to use')
    string(name: 'BACKEND_FILE', defaultValue: '/home/jenkins/.tfvars/minio.backend.hcl', description: 'Optional path to the backend config to use')
  }

  stages {
    stage('Terraform Version') {
      steps {
        sh 'terraform version'
      }
    }

    stage('Run Terraform Pipeline') {
      steps {
        script {
          def sanitize = { value ->
            value.replace('\\', '\\\\').replace('"', '\\"')
          }

          def tfvars = params?.TFVARS_FILE?.trim()
          def backend = params?.BACKEND_FILE?.trim()

          def argsBlock = new StringBuilder()
          if (tfvars) {
            argsBlock << "ARGS+=(\"--tfvars\" \"${sanitize(tfvars)}\")\n"
          }
          if (backend) {
            argsBlock << "ARGS+=(\"--backend\" \"${sanitize(backend)}\")\n"
          }

          sh """#!/usr/bin/env bash
set -euo pipefail

ARGS=()
${argsBlock.toString()}if [[ \${#ARGS[@]} -eq 0 ]]; then
  pipeline/terraform.sh
else
  pipeline/terraform.sh "\${ARGS[@]}"
fi
"""
        }
      }
    }
  }
}
